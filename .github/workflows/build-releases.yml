name: Create Release and Upload Assets

on:
  push:
    tags:
      - 'v*' # Runs on tags like v1.0, v1.2.3

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build_and_upload:
    name: Build and Upload on ${{ matrix.os_name }}
    needs: create_release
    permissions:
      contents: write
    runs-on: ${{ matrix.os_image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_name: macOS-Intel
            os_image: macos-13 # Intel-based runner
            asset_name_prefix: KubeContextManager-macOS-Intel
            asset_content_type: application/x-apple-diskimage
            arch: x86_64
            MACOSX_DEPLOYMENT_TARGET: '11.0' # Target Big Sur or later
          - os_name: macOS-AppleSilicon
            os_image: macos-14 # ARM64 (Apple Silicon) based runner
            asset_name_prefix: KubeContextManager-macOS-AppleSilicon
            asset_content_type: application/x-apple-diskimage
            arch: arm64
            MACOSX_DEPLOYMENT_TARGET: '12.0' # Target Monterey or later

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ "${{ matrix.os_name }}" == macOS* ]]; then
            brew install create-dmg
          fi
          if [[ "${{ matrix.os_name }}" == "macOS-Intel" ]]; then
            arch -x86_64 pip install -r requirements.txt
            arch -x86_64 pip install pyinstaller
          else
            pip install -r requirements.txt
            pip install pyinstaller
          fi

      - name: Build Application
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.MACOSX_DEPLOYMENT_TARGET }}
          ARCHFLAGS: ${{ matrix.os_name == 'macOS-Intel' && '-arch x86_64' || '' }}
        run: |
          chmod +x build.sh
          if [[ "${{ matrix.os_name }}" == "macOS-Intel" ]]; then
            arch -x86_64 ./build.sh
          else
            ./build.sh
          fi

      - name: Prepare Asset for Upload (macOS)
        if: startsWith(matrix.os_name, 'macOS')
        run: |
          create-dmg \
            --volname "${{ matrix.asset_name_prefix }} Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "KubeContextManager.app" 200 190 \
            --hide-extension "KubeContextManager.app" \
            --app-drop-link 600 185 \
            "${{ matrix.asset_name_prefix }}.dmg" \
            "dist/KubeContextManager.app"
          echo "ASSET_PATH=${{ matrix.asset_name_prefix }}.dmg" >> $GITHUB_ENV
          echo "ASSET_NAME=${{ matrix.asset_name_prefix }}.dmg" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream